---
name: Rust TLS Implementation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:
    types: [checks_requested]
    branches: [main]

env:
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2024-12-01
  RUST_IMPLEMENTATION_PATH: rust

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        id: toolchain
        run: |
          rustup toolchain install stable
          rustup override set stable

      - uses: camshaft/rust-cache@v1
        with:
          workspaces: ${{ env.RUST_IMPLEMENTATION_PATH }}

      # Run all tests
      - name: Run all tests
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo test --all

      # Run unit tests separately
      - name: Run unit tests
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo test --lib --test unit

      # Run property tests
      - name: Run property tests
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo test --test property

      # Run snapshot tests
      - name: Run snapshot tests
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo test --test snapshot

  interop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        id: toolchain
        run: |
          rustup toolchain install stable
          rustup override set stable

      - uses: camshaft/rust-cache@v1
        with:
          workspaces: ${{ env.RUST_IMPLEMENTATION_PATH }}

      # Build the C s2n-tls implementation
      - name: Build s2n-tls
        run: |
          cmake . -Bbuild \
            -DBUILD_SHARED_LIBS=on
          cmake --build ./build -- -j $(nproc)

      # Run interoperability tests
      - name: Run interoperability tests
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo test --test interop -- --ignored

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        id: toolchain
        run: |
          rustup toolchain install stable
          rustup component add llvm-tools-preview
          rustup override set stable

      - uses: camshaft/rust-cache@v1
        with:
          workspaces: ${{ env.RUST_IMPLEMENTATION_PATH }}

      # Install cargo-llvm-cov for code coverage
      - name: Install cargo-llvm-cov
        uses: baptiste0928/cargo-install@v3.3.1
        with:
          crate: cargo-llvm-cov

      # Generate code coverage report
      - name: Generate code coverage
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.RUST_IMPLEMENTATION_PATH }}/lcov.info
          fail_ci_if_error: true

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        id: toolchain
        run: |
          rustup toolchain install stable --profile minimal --component rustfmt
          rustup override set stable

      - uses: camshaft/rust-cache@v1
        with:
          workspaces: ${{ env.RUST_IMPLEMENTATION_PATH }}

      # Check formatting
      - name: Check formatting
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        id: toolchain
        run: |
          rustup toolchain install stable --profile minimal --component clippy
          rustup override set stable

      - uses: camshaft/rust-cache@v1
        with:
          workspaces: ${{ env.RUST_IMPLEMENTATION_PATH }}

      # Run clippy
      - name: Run clippy
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Run the rust unit tests under address sanitizer.
  asan-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        id: toolchain
        run: |
          rustup toolchain install ${{ env.RUST_NIGHTLY_TOOLCHAIN }} \
            --profile minimal \
            --component rust-src \
            --target x86_64-unknown-linux-gnu
          rustup override set ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
      
      - uses: camshaft/rust-cache@v1
        with:
          workspaces: ${{ env.RUST_IMPLEMENTATION_PATH }}

      # asan expects a binary at /usr/bin/llvm-symbolizer but GHA runners include
      # multiple versioned binaries, like /usr/bin/llvm-symbolizer-13. This step
      # finds the latest symbolizer and use it as the "base" llvm-symbolizer binary.
      #
      # llvm-symbolizer is necessary to get nice stack traces from asan errors. 
      # Otherwise the stack trace just contains a hex address like "0x55bc6a28a9b6"
      - name: set llvm symbolizer
        run: |
          sudo ln -s $(find /usr/bin/ -maxdepth 1 -name "llvm-symbolizer-*" | sort -V | tail -n 1) /usr/bin/llvm-symbolizer

      - name: Run Unit Tests under ASAN
        env:
          RUSTDOCFLAGS: -Zsanitizer=address
          RUSTFLAGS: -Zsanitizer=address
        working-directory: ${{ env.RUST_IMPLEMENTATION_PATH }}
        run: |
          cargo test \
            -Zbuild-std \
            --target x86_64-unknown-linux-gnu
